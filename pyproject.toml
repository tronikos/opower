[project]
name = "opower"
version = "0.8.0"
license = {text = "Apache-2.0"}
authors = [
    { name="tronikos", email="tronikos@gmail.com" },
]
description = "A Python library for getting historical and forecasted usage/cost from utilities that use opower.com such as PG&E"
readme = "README.md"
requires-python = ">=3.9"
dependencies = [
    "aiohttp>=3.8",
    "aiozoneinfo>=0.1",
    "arrow>=1.2",
    "cryptography>=43.0.0",
    "pyotp>=2.0",
]

[project.urls]
"Homepage" = "https://github.com/tronikos/opower"
"Bug Tracker" = "https://github.com/tronikos/opower/issues"

[build-system]
requires = ["setuptools"]
build-backend = "setuptools.build_meta"

[tool.black]
extend-exclude = "_pb2.py|_pb2_grpc.py"

[tool.isort]
profile = "black"
force_sort_within_sections = true
combine_as_imports = true
extend_skip_glob = ["*_pb2.py", "*_pb2_grpc.py"]

[tool.ruff]
target-version = "py311"
exclude = ["*_pb2.py", "*_pb2_grpc.py", "*.pyi"]
line-length = 127

lint.select = [
    "B007", # Loop control variable {name} not used within loop body
    "B014", # Exception handler with duplicate exception
    "C",  # complexity
    "D",  # docstrings
    "E",  # pycodestyle
    "F",  # pyflakes/autoflake
    "ICN001", # import concentions; {name} should be imported as {asname}
    "PGH004",  # Use specific rule codes when using noqa
    "PLC0414", # Useless import alias. Import alias does not rename original package.
    "SIM105", # Use contextlib.suppress({exception}) instead of try-except-pass
    "SIM117", # Merge with-statements that use the same scope
    "SIM118", # Use {key} in {dict} instead of {key} in {dict}.keys()
    "SIM201", # Use {left} != {right} instead of not {left} == {right}
    "SIM212", # Use {a} if {a} else {b} instead of {b} if not {a} else {a}
    "SIM300", # Yoda conditions. Use 'age == 42' instead of '42 == age'.
    "SIM401", # Use get from dict with default instead of an if block
    "T20",  # flake8-print
    "TRY004", # Prefer TypeError exception for invalid type
    "RUF006", # Store a reference to the return value of asyncio.create_task
    "UP",  # pyupgrade
    "W",  # pycodestyle
]

lint.ignore = [
    "D203",  # 1 blank line required before class docstring
    "D213",  # Multi-line docstring summary should start at the second line
    # keep-runtime-annotations
    'UP006', # Non PEP585 annotations
    'UP007', # Non PEP604 annotations
]

[tool.ruff.lint.flake8-pytest-style]
fixture-parentheses = false

[tool.ruff.lint.per-file-ignores]
# Allow for main script to write to stdout
"__main__.py" = ["T201"]

[tool.ruff.lint.mccabe]
max-complexity = 25

[project.optional-dependencies]
dev = [
    "pytest>=7,<8",
    "python-dotenv>=1,<2",
]
